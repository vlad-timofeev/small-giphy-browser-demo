{"version":3,"sources":["features/gif/components/Gif.module.css","config.js","features/gif/gifReducer.js","features/gif/components/GifSearch.js","features/gif/components/Gif.js","features/gif/components/FullscreenGif.js","features/gif/components/GifViewer.js","features/gif/gifApi.js","App.js","store.js","index.js","features/gif/components/GifViewer.module.css","features/gif/components/FullscreenGif.module.css"],"names":["module","exports","API_KEY","process","REACT_APP_API_KEY","DEFAULT_GIFS_CONTAINER","total","gifs","slice","createSlice","name","initialState","isFetching","fetchingError","queryString","gifsByQueryString","reducers","appendGifs","state","action","existing","existingGifs","payload","concat","setIsFetching","setQueryString","setFetchingError","getState","getGifsContainer","selectGifs","selectIsFetching","selectCanFetchMore","length","selectQueryString","selectTotal","actions","GifSearch","dispatch","useDispatch","useState","useSelector","submitQueryString","setQueryStringGlobal","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","disabled","Gif","gif","blockLoading","onInView","onGifLoad","fullScreen","title","targetGif","originalGif","fixedHeightGif","height","width","url","useInView","rootMargin","threshold","triggerOnce","ref","inView","useEffect","className","styles","gifImage","style","alt","src","onLoad","onError","GifFullscreen","onClose","gifFullscreenContainer","fullscreenGif","stopPropagation","fullscreenHint","requestMoreGifs","offset","onSuccess","onFailure","isQueryRequest","URL","params","api_key","limit","q","search","URLSearchParams","toString","fetch","then","data","json","fetchedGifs","map","item","id","images","fixed_height","original","pagination","total_count","catch","fetchGifs","console","error","GifViewer","canFetchMore","loadedGifsNumber","setLoadedGifsNumber","setFullscreenGif","gifsNumber","incrementLoadedGifsNumber","resultsLabel","resultsText","loadingIndicatorText","gifsOuterContainer","gifsContainer","gifsSearch","index","gifWrapper","bind","undefined","loadingIndicator","App","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.969dbb58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gifImage\":\"Gif_gifImage__37hA8\"};","// key to access Giphy api\nexport const API_KEY = process.env.REACT_APP_API_KEY;\n// how many items to fetch in one request to Giphy API\nexport const PAGE_SIZE = 50;\n// max distance between a GIF and the viewport in pixels before\n// loading GIFs data (lazy loading)\nexport const VIEWPORT_LOADING_MARGIN = 500;\n// max number of gifs to fetch simultaneously\n// small number leads to more consistent, but slow loading\n// high number,in contrast, causes notable \"holes\" in the gif grid, and\n// also Giphy server may reject too many parallel requests\nexport const MAX_GIFS_CONCURRENT_REQUESTS = 5;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst DEFAULT_GIFS_CONTAINER = {\n  total: null,\n  gifs: [],\n};\n\nexport const slice = createSlice({\n  name: 'gifs',\n  initialState: {\n    isFetching: false,\n    fetchingError: false,\n    queryString: '',\n    gifsByQueryString: {},\n  },\n  reducers: {\n    appendGifs: (state, action) => {\n      const queryString = state.queryString;\n      const existing = state.gifsByQueryString[queryString];\n      const existingGifs = !existing ? [] : existing.gifs;\n      const { total, gifs } = action.payload;\n      state.gifsByQueryString[queryString] = {\n        total,\n        gifs: existingGifs.concat(gifs),\n      };\n    },\n    setIsFetching: (state, action) => {\n      state.isFetching = action.payload.isFetching;\n    },\n    setQueryString: (state, action) => {\n      state.queryString = action.payload.queryString;\n    },\n    setFetchingError: state => {\n      state.fetchingError = true;\n    },\n  },\n});\n\nconst getState = state => state.gifs;\n\nconst getGifsContainer = state => {\n  const { queryString, gifsByQueryString } = getState(state);\n  const gifsContainer =\n    gifsByQueryString[queryString] || DEFAULT_GIFS_CONTAINER;\n  return gifsContainer;\n};\n\nexport const selectGifs = state => {\n  return getGifsContainer(state).gifs;\n};\nexport const selectIsFetching = state => getState(state).isFetching;\nexport const selectCanFetchMore = state => {\n  const { total, gifs } = getGifsContainer(state);\n  const { fetchingError } = getState(state);\n  return !fetchingError && (total === null || gifs.length < total);\n};\nexport const selectQueryString = state => getState(state).queryString;\nexport const selectTotal = state => getGifsContainer(state).total;\n\nexport const {\n  appendGifs,\n  setIsFetching,\n  setQueryString,\n  setFetchingError,\n} = slice.actions;\n\nexport default slice.reducer;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  setQueryString as setQueryStringGlobal,\n  selectIsFetching,\n} from '../gifReducer';\n\nexport default function GifSearch() {\n  const dispatch = useDispatch();\n  const [queryString, setQueryString] = useState('');\n  const isFetching = useSelector(selectIsFetching);\n\n  const updateQueryString = e => setQueryString(e.target.value);\n\n  const submitQueryString = () => {\n    if (!isFetching) {\n      dispatch(setQueryStringGlobal({ queryString }));\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      submitQueryString();\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={queryString}\n        onChange={updateQueryString}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Leave empty to find trending GIFs\"\n      />\n      <button onClick={submitQueryString} disabled={isFetching}>\n        Search\n      </button>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nimport { VIEWPORT_LOADING_MARGIN } from '../../../config';\nimport styles from './Gif.module.css';\n\n// gif - gif metadata and urls\n// blockLoading - don't load this GIF even if it's in view\n// onInView - callback to execute when the GIF became visible for the 1st time\n// onGifLoad - callback when the GIF loaded its image or failed to do so\n// fullScreen - whether fullscreen version on the GIF must be used\nexport default function Gif({\n  gif,\n  blockLoading,\n  onInView,\n  onGifLoad,\n  fullScreen,\n}) {\n  const { title } = gif;\n  const targetGif = !fullScreen ? gif.fixedHeightGif : gif.originalGif;\n  const { height, width, url } = targetGif;\n  const [ref, inView] = useInView({\n    rootMargin: `${VIEWPORT_LOADING_MARGIN}px 0px`,\n    threshold: 0,\n    triggerOnce: true,\n  });\n\n  useEffect(() => {\n    if (inView && onInView) {\n      onInView();\n    }\n  }, [inView, onInView]);\n\n  return (\n    <div\n      ref={ref}\n      className={styles.gifImage}\n      style={{\n        width: `${width}px`,\n        height: `${height}px`,\n      }}\n    >\n      {inView && !blockLoading ? (\n        <img\n          alt={title}\n          height={height}\n          width={width}\n          src={url}\n          onLoad={onGifLoad}\n          onError={onGifLoad}\n        />\n      ) : null}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport styles from './FullscreenGif.module.css';\n\nimport Gif from './Gif';\n\nexport default function GifFullscreen({ gif, onClose }) {\n  return (\n    gif && (\n      <div className={styles.gifFullscreenContainer} onClick={onClose}>\n        <div className={styles.title}>{gif.title}</div>\n        <div\n          className={styles.fullscreenGif}\n          onClick={e => e.stopPropagation()}\n        >\n          <Gif gif={gif} fullScreen />\n        </div>\n        <div className={styles.fullscreenHint}>\n          Click outside the GIF to exit the fullscreen view\n        </div>\n      </div>\n    )\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { MAX_GIFS_CONCURRENT_REQUESTS } from '../../../config';\n\nimport { fetchGifs } from '../gifApi';\nimport {\n  appendGifs,\n  selectGifs,\n  setIsFetching,\n  setFetchingError,\n  selectIsFetching,\n  selectCanFetchMore,\n  selectQueryString,\n  selectTotal,\n} from '../gifReducer';\n\nimport styles from './GifViewer.module.css';\n\nimport GifSearch from './GifSearch';\nimport Gif from './Gif';\nimport FullscreenGif from './FullscreenGif';\n\nfunction requestMoreGifs(dispatch, offset, queryString) {\n  const onSuccess = ({ total, gifs }) => {\n    dispatch(appendGifs({ total, gifs }));\n    dispatch(setIsFetching({ isFetching: false }));\n  };\n  const onFailure = e => {\n    console.error(e);\n    dispatch(setFetchingError());\n    dispatch(setIsFetching({ isFetching: false }));\n  };\n  dispatch(setIsFetching({ isFetching: true }));\n  fetchGifs(offset, queryString, onSuccess, onFailure);\n}\n\nexport function GifViewer() {\n  const dispatch = useDispatch();\n  const gifs = useSelector(selectGifs);\n  const isFetching = useSelector(selectIsFetching);\n  const canFetchMore = useSelector(selectCanFetchMore);\n  const queryString = useSelector(selectQueryString);\n  const total = useSelector(selectTotal);\n  const [loadedGifsNumber, setLoadedGifsNumber] = useState(0);\n  const [fullscreenGif, setFullscreenGif] = useState(null);\n\n  const gifsNumber = gifs.length;\n\n  useEffect(() => {\n    // perform initial fetch for the given query string\n    if (gifsNumber === 0 && !isFetching && canFetchMore) {\n      requestMoreGifs(dispatch, gifsNumber, queryString);\n    }\n  }, [gifsNumber, isFetching, canFetchMore, dispatch, queryString]);\n\n  useEffect(() => {\n    // if query string changed need to reset loaded gifs counter\n    setLoadedGifsNumber(0);\n  }, [queryString]);\n\n  const incrementLoadedGifsNumber = () => {\n    setLoadedGifsNumber(loadedGifsNumber + 1);\n  };\n\n  const resultsLabel = queryString === '' ? 'trending' : `\"${queryString}\"`;\n  let resultsText = `Showing ${resultsLabel} GIFs`;\n  if (total != null) {\n    resultsText += `: ${gifsNumber} out of ${total}`;\n  }\n\n  let loadingIndicatorText = null;\n  if (isFetching) {\n    loadingIndicatorText = 'Loading...';\n  } else if (total === gifsNumber) {\n    loadingIndicatorText = 'No more results.';\n  }\n\n  return (\n    <div className={styles.gifsOuterContainer}>\n      <FullscreenGif\n        gif={fullscreenGif}\n        onClose={() => setFullscreenGif(null)}\n      />\n      <h1>Small Giphy Browser</h1>\n      <GifSearch />\n      <div className={styles.gifsContainer}>\n        <div className={styles.gifsSearch}>\n          <i>{resultsText}</i>\n        </div>\n        {gifs.map((gif, index) => (\n          <div\n            key={gif.id}\n            className={styles.gifWrapper}\n            onClick={() => setFullscreenGif(gif)}\n          >\n            <Gif\n              gif={gif}\n              blockLoading={\n                index >= loadedGifsNumber + MAX_GIFS_CONCURRENT_REQUESTS\n              }\n              onInView={\n                // Fetch more gifs when the last gif becomes close to the viewport\n                index === gifs.length - 1 && !isFetching && canFetchMore\n                  ? requestMoreGifs.bind(\n                      null,\n                      dispatch,\n                      gifsNumber,\n                      queryString\n                    )\n                  : undefined\n              }\n              onGifLoad={incrementLoadedGifsNumber}\n            />\n          </div>\n        ))}\n        {loadingIndicatorText && (\n          <div className={styles.loadingIndicator}>\n            <h2>{loadingIndicatorText}</h2>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { API_KEY, PAGE_SIZE } from '../../config';\n\nconst TRENDING_URL = 'https://api.giphy.com/v1/gifs/trending';\nconst SEARCH_URL = 'https://api.giphy.com/v1/gifs/search';\n\nexport function fetchGifs(offset, queryString, onSuccess, onFailure) {\n  if (!API_KEY) {\n    onFailure('Please set API key with REACT_APP_API_KEY env. var.');\n    return;\n  }\n\n  const isQueryRequest = queryString !== '';\n  const url = new URL(isQueryRequest ? SEARCH_URL : TRENDING_URL);\n  const params = {\n    api_key: API_KEY,\n    limit: PAGE_SIZE,\n    offset,\n  };\n  if (isQueryRequest) {\n    params.q = queryString;\n  }\n  url.search = new URLSearchParams(params).toString();\n\n  fetch(url)\n    .then(data => data.json())\n    .then(json => {\n      const fetchedGifs = extractGifs(json);\n      onSuccess({\n        total: json.pagination.total_count,\n        gifs: fetchedGifs,\n      });\n    })\n    .catch(e => {\n      onFailure(e);\n    });\n}\n\nfunction extractGifs(response) {\n  return response.data.map(item => ({\n    id: item.id,\n    title: item.title,\n    fixedHeightGif: item.images.fixed_height,\n    originalGif: item.images.original,\n  }));\n}\n","import React from 'react';\r\n\r\nimport { GifViewer } from './features/gif/components/GifViewer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GifViewer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport gifs from './features/gif/gifReducer';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    gifs,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gifsOuterContainer\":\"GifViewer_gifsOuterContainer__rC2Us\",\"gifsContainer\":\"GifViewer_gifsContainer__3CjEI\",\"gifsSearch\":\"GifViewer_gifsSearch__RzDAb\",\"loadingIndicator\":\"GifViewer_loadingIndicator__2gmyb\",\"gifWrapper\":\"GifViewer_gifWrapper__xIMTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gifFullscreenContainer\":\"FullscreenGif_gifFullscreenContainer__unBUN\",\"fullscreenHint\":\"FullscreenGif_fullscreenHint__1LxCG\",\"title\":\"FullscreenGif_title__1hh_l\",\"fullscreenGif\":\"FullscreenGif_fullscreenGif__15yBi\"};"],"sourceRoot":""}